{"name":"Tlslog","tagline":"TLSLog is a golang library which stores SSL/TLS (Key-Exchange method must be ECDHE) master key and client random in NSS key log format that can be used for aplication data decryption using Wireshark","body":"#TLSLog\r\n\r\n[![license](http://img.shields.io/badge/license-MIT-red.svg?style=flat)](https://raw.githubusercontent.com/123hurray/tlslog/master/LICENSE)\r\n\r\n## Introduction\r\nTLSLog is a Golang library used to debug SSL application data for Wireshark.\r\n\r\nIf ECDHE is used in Key-Exchange, Wireshark cannot decrypt the application data only by set the server private key.\r\nBut Wireshark supports [NSS key log format](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format) that store all information\r\nneeded in application data decryption process.\r\n\r\nNSS key log format is supported by Chrome and Firefox but not Golang.\r\nWhen using Golang `crypto/tls` library, it's difficult to debug encrypted data sent and received by SSL.\r\n\r\nBut Golang `crypto/tls` library does store these information internally.\r\nThus, TLSLog hooks `config.Rand` and uses reflection to get master secret from `crypto/tls` library.\r\n\r\n**CAUTION：Only client side function is implemented, which means that TLSLog can not be used to build a SSL server.**\r\n\r\n## Usage\r\n\r\n### Install\r\n\r\n```shell\r\ngo get github.com/123hurray/tlslog/tlslog.go\r\n```\r\n\r\n### Dial\r\n\r\n`Dial` is the most commonly way to build an SSL client.\r\n\r\n```go\r\nconfig := tls.Config{InsecureSkipVerify: true}\r\n\r\n// Get a TLSLog\r\ntlsLog, err := NewTLSLog(\"log.txt\")\r\nif err != nil {\r\n\tfmt.Println(\"Unable to create TlsLog:\", err.Error())\r\n}\r\n\r\n// Use TLSLog.Dial instead of tls.Dial\r\nconn, err := tlsLog.Dial(\"tcp\", \"127.0.0.1:32123\", &config)\r\n\r\n// conn is tls.Conn, just used as is documented in tls library\r\n```\r\n\r\n### Client\r\n\r\n`Client` is another way to build an SSL client.\r\n\r\n```go\r\nconfig := tls.Config{InsecureSkipVerify: true}\r\ntlsLog, err := NewTLSLog(\"log.txt\")\r\n// Make net.conn\r\nc, s := net.Pipe()\r\n// use TLSLog.Client instead of tls.Client\r\nlogCli := tlsLog.Client(c, &config)\r\n// Do handshake\r\nconn, err = logCli.Handshake()\r\n// conn is tls.Conn, just used as is documented in tls library\r\n```\r\n\r\n## Decrypt application data using Wireshark\r\n\r\nSee the articles below:\r\n\r\n* [Wireshark WIKI:Using the (Pre)-Master-Secret](https://wiki.wireshark.org/SSL#Using_the_.28Pre.29-Master-Secret)\r\n* [Decrypting TLS Browser Traffic With Wireshark – The Easy Way!](https://jimshaver.net/2015/02/11/decrypting-tls-browser-traffic-with-wireshark-the-easy-way/)\r\n\r\n\r\n## TODO\r\n\r\n* Server side key log","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}